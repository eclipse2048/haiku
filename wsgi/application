#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  application (web-frontend for Haiku / Automatoetry)
#
#  Copyright 2013 Tobias Radloff <mail@tobias-radloff.de>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#


from __future__ import division, absolute_import # Aufwaertskompatibilitaet
import os

# lokal oder Openshift?
if os.environ.has_key("OPENSHIFT_PYTHON_DIR"):
	RUNS_ON_OPENSHIFT = True
else:
	RUNS_ON_OPENSHIFT = False

# Virtual Environment fuer Openshift
if RUNS_ON_OPENSHIFT:
	virtenv = os.environ["OPENSHIFT_PYTHON_DIR"] + "/virtenv/"
	os.environ["PYTHON_EGG_CACHE"] = os.path.join(virtenv, "lib/python2.6/site-packages")
	virtualenv = os.path.join(virtenv, "bin/activate_this.py")
	try:
		execfile(virtualenv, dict(__file__=virtualenv))
	except IOError:
		pass

# Zusaetzliche Module erst ab hier importieren (wg. Openshift virtual environment)
import web # @NICE2HAVE: Von web.py auf flask umstellen
import json
from automatoetry import AutoPoemSpecimen

# Initialisierungsvariablen fuer web.py
urls = ("/", "start", "/do", "automatoetry")
render = web.template.render(os.path.abspath(os.path.dirname(__file__)) + "/templates/")
#web.config.debug = False
if RUNS_ON_OPENSHIFT:
	application = web.application(urls, globals()).wsgifunc()
else:
	app = web.application(urls, globals()) # erzeugt ImportError, falls kein Symlink application.py -> application existiert

# globale Haiku-Variable
myPoem = None


class start:
	u"""Definiert Formular und GET- und POST-Methoden fuer die
		Startwebseite des Projekts, auf der der User den Genotyp fuer
		Generation 1 bestimmt. Das zugehoerige Template ist
		"templates/start.html".
	"""

	# @TODO: Auswahlkaestchen fuer die Developfkt. hinzufuegen
	form = web.form.Form(
		web.form.Textbox(
			"seedword",
			web.form.notnull,
			size = 19,
			class_ = "textfield",
			description = "Seedwort:"
		),
		web.form.Button(
			"Neues Zufallswort",
			id = "newSeedword",
			class_ = "button"
		),
		web.form.Textbox(
			"genes",
			web.form.notnull,
			web.form.regexp(r"^[a-z ]*$", "Bitte nur Kleinbuchstaben"),
			web.form.regexp(r"^[a-z]{5} [a-z]{7} [a-z]{5}$", "Gene muessen 5, 7, 5 Zeichen enthalten, jeweils durch Leerzeichen getrennt"), #
			size = 19,
			maxlength = 19,
			class_ = "textfield",
			description = "Gene:"
		),
		web.form.Button(
			"Neue Gene",
			id = "newGenes",
			class_ = "button"
		),
		web.form.Button(
			"Los",
			class_ = "los"
		)
	)


	def GET(self):
		u"""Gibt das Formular fuer Gene und Seedwort zurueck, befuellt
			mit Zufallswerten.
		"""
		# neues Start-Haiku erzeugen
		global myPoem
		myPoem = AutoPoemSpecimen()
#		print "/ GET: lese myPoem aus:\n%s \n%s \n%s \n%s" %(myPoem.getGenotype(), myPoem.getPhenotype(), myPoem.getParent(), myPoem.getChildren()) #DEBUG

		# Formular erzeugen und mit Werten fuellen
		f = self.form()
		f["seedword"].set_value(myPoem.getGenotype()[0])
		f["genes"].set_value(myPoem.getGenotype()[1])
		return render.start(f)


	def POST(self):
		u"""Wird von den Buttons auf "templates/start.html" aufgerufen.
			Je nach Aufrufer wird unterschiedlich verfahren:
			- Neues Seedwort / Neue Gene: Funktion gibt neue
			Zufallswerte zurueck
			- Los-Button (Submit): Funktion erzeugt myPoem mit den
			Werten aus dem Formular neu und ruft Seite "do" auf.
		"""

		global myPoem
		input = web.input(Los="")
		print "/ POST: input ist", input #DEBUG

		# "Los"-Button
		if input["Los"] != "":
			f = self.form()
			if not f.validates():
				return render.start(f)
			myPoem = AutoPoemSpecimen(f.d.seedword, f.d.genes)
			print "/ POST: Elter lautet", myPoem.getGenotype() #DEBUG
			raise web.seeother("do")

		# "Neu"-Button: neues Seedwort oder Gene zurueckgeben
		if input["caller"] == "newSeedword":
			print "/ POST: Neues Seedword angefordert" #DEBUG
			return myPoem.getRandomSeedword()
		elif input["caller"] == "newGenes":
			print "/ POST: Neue Gene angefordert" #DEBUG
			return myPoem.getRandomGenes()


class automatoetry:
	u"""Definiert GET- und POST-Methoden fuer die Hauptwebseite des
		Projekts, auf der der User zwischen den Kindern einer Generation
		entscheidet, welches sich weiter fortpflanzt. Das zugehoerige
		Template ist "templates/automatoetry.html".
	"""


	def GET(self):
		u"""Gibt Seedwort, Gene und Phaenotyp fuer Generation 1 zurueck
			(den Phaenotyp als Liste von Zeilen).
		"""
		# @NICE2HAVE: Redirect nach /, falls die Seite anders als durch seeother()  aufgerufen wurde

		global myPoem
		print "/do GET: Genotyp ist", myPoem.getGenotype() #DEBUG
		# @TODO: getPhenotype()-Aufruf in try: except HaikuError-Block einbetten. Problem: Wenn Fehler, wie gebe ich den an die Ajax-Fkt. weiter?
		phenotype = myPoem.getPhenotype()
		return render.automatoetry(myPoem.getGenotype()[0], myPoem.getGenotype()[1], phenotype.split("\n"))


	def POST(self):
		u"""Erledigt POST-Requests. Sorgt fuer den Wechsel zur neuen
			Generation und gibt die zwei neue Kinder zurueck.
		"""

		global myPoem
		input = web.input()
		print "/do POST: input ist:", input #DEBUG
		print "/do POST: Kinder des Elter sind", myPoem.getChildren() #DEBUG

		# Welches Kind wird neuer Elter?
		if input["child"] == "l":
			myPoem = myPoem.getChildren()[0]
		elif input["child"] == "r":
			myPoem = myPoem.getChildren()[1]
		print "/do POST: Neuer Elter ist:", myPoem.getGenotype() #DEBUG
s
		# Kinder erzeugen und als JSON-Objekt zurueckgeben
		children = myPoem.procreateN(2)
		print "/do POST: Kinder sind erzeugt" #DEBUG
# @TODO: getPhenotype()-Aufrufe in try: except HaikuError-Block einbetten
		return json.dumps([[child.getGenotype(), child.getPhenotype().replace("\n", "<br/>")] for child in children])


if __name__ == '__main__':
	if RUNS_ON_OPENSHIFT:
		from wsgiref.simple_server import make_server
		httpd = make_server('localhost', 80, application)
		httpd.serve_forever()
	else: # starte lokal mit web.py
		app.run()
