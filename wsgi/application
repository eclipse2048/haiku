#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  application (haiku web-frontend)
#
#  Copyright 2013 Tobias Radloff <mail@tobias-radloff.de>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#

# OpenShift-Gedöns
import os

virtenv = os.environ['OPENSHIFT_PYTHON_DIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
#

# Mein Code startet hier
import web, string, random, json
from automatoetry import AutoPoemSpecimen

urls = (
	"/", "start",
	"/do", "automatoetry"
)
render = web.template.render('templates/')
application = web.application(urls, globals()).wsgifunc()

myPoem = AutoPoemSpecimen()

class start:
	""" @TODO: Beschreibung fehlt
	"""

	# Eingabeformular für Seedwort und Gene
	# Die Buttons für neue Zufallswerte werden im Template hinzugefügt
	form = web.form.Form(
		web.form.Textbox(
			"seedword",
			web.form.notnull,
			size = 19, # oder 17
			class_ = "textfield",
			description = "Seedwort:"
		),
		web.form.Textbox( # @TODO evtl. drei Textboxen draus machen
			"genes",
			web.form.notnull, # @TODO Validator schreiben
			size = 19,
			maxlength = 19,
			class_ = "textfield",
			description = "Gene:"
		),
		web.form.Button(
			"Los",
			class_ = "los"
		)
	)

	def GET(self):
		# Hier braucht myPoem nicht global sein, da ich nur die Zufallsroutinen verwende
		f = self.form()
		f["seedword"].set_value(myPoem.createRandomSeedword())
		f["genes"].set_value(myPoem.createRandomGenes())
		return render.start(f)

	def POST(self):
		global myPoem
		input = web.input(Los="")
		print "/ POST: input ist", input #DEBUG

		# Go-Button: myPoem mit Formularwerten neu erzeugen und Seite "do" aufrufen
		if input["Los"] != "":
			f = self.form()
			if not f.validates():
				return render.start(f)
			myPoem = AutoPoemSpecimen([f.d.seedword, f.d.genes])
			print "/ POST: Elter lautet", myPoem.getGenotype() #DEBUG
			raise web.seeother("do")

		# "Neu"-Button: neues Seedwort oder Gene an start.html übergeben
		if input["caller"] == "newSeedword":
			return myPoem.createRandomSeedword()
		elif input["caller"] == "newGenes":
			return myPoem.createRandomGenes()


class automatoetry:
	""" @TODO: Beschreibung fehlt
	"""

	def GET(self):
		global myPoem

		ph = myPoem.getPhenotype()
#		ph = "werd ich hab dich irrst  \n nicht wie unsereiner und \n wie unsereiner" #DEBUG - fester Genotyp (s. start.GET())
		print "/do GET: Phänotyp ist\n", ph #DEBUG
		return render.automatoetry(myPoem.getGenotype()[0], myPoem.getGenotype()[1], ph.split("\n"))

	def POST(self):
		global myPoem

		input = web.input()
		print "/do POST: input ist:", input #DEBUG

		# Welches Kind wird neuer Elter?
		if input["child"] == "l":
			myPoem = AutoPoemSpecimen(myPoem.getChildren()[0].getGenotype())
		elif input["child"] == "r":
			myPoem = AutoPoemSpecimen(myPoem.getChildren()[1].getGenotype())

		# Allererste Generation: nichts machen; Codeblock ist redundant
		elif input["child"] == "0":
			pass

		# Kinder erzeugen und als JSON-Objekt zurückgeben
		children = myPoem.procreateN(2)
		return json.dumps([[child.getGenotype(), child.getPhenotype().replace("\n", "<br/>")] for child in children])


if __name__ == '__main__':
	from wsgiref.simple_server import make_server
	httpd = make_server('localhost', 80, application)
	# Wait for a single request, serve it and quit.
	httpd.handle_request()
#    app.run()
