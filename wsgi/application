#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  application (web-frontend for Haiku / Automatoetry)
#
#  Copyright 2013 Tobias Radloff <mail@tobias-radloff.de>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

from __future__ import division, absolute_import
import os

if "OPENSHIFT_PYTHON_DIR" in os.environ: # alternativ: import platform; if platform.node == [OPENSHIFT-whatever]: ...
	RUNS_ON_OPENSHIFT = True
else:
	RUNS_ON_OPENSHIFT = False

# Virtual Environment fuer Openshift
if RUNS_ON_OPENSHIFT:
	virtenv = os.environ["OPENSHIFT_PYTHON_DIR"] + "/virtenv/"
	os.environ["PYTHON_EGG_CACHE"] = os.path.join(virtenv, "lib/python2.6/site-packages")
	virtualenv = os.path.join(virtenv, "bin/activate_this.py")
	try:
		execfile(virtualenv, dict(__file__=virtualenv))
	except IOError:
		pass

# Zusaetzliche Module erst ab hier importieren wg. Openshift virtenv
import web
import json
import tempfile
import datetime
from automatoetry import Haiku, GENES_REGEXP

# Initialisierungsvariablen fuer web.py
web.config.debug = False
urls = (
	"/", "GenerationZero",
	"/gallery", "Gallery",
	"/haiku", "Automatoetry",
	"/share", "Share",
	"/add", "AddHaiku",
)
render = web.template.render(
	os.path.abspath(os.path.dirname(__file__)) + "/templates/",
	base = "layout",
	globals = {"round": round}
)

# application starten
app = web.application(urls, globals()) # erzeugt ImportError, falls kein Symlink application.py -> application existiert
if RUNS_ON_OPENSHIFT:
	application = app.wsgifunc()

# erzeuge Session
web.config.session_parameters.cookie_name = "haiku_session_id"
if RUNS_ON_OPENSHIFT:
	sessionsDir = os.environ["OPENSHIFT_DATA_DIR"] + "sessions/"
else:
	sessionsDir = tempfile.gettempdir() + "/sessions/"
session = web.session.Session(app, web.session.DiskStore(sessionsDir))

# erzeuge Datenbank-Objekt
if "OPENSHIFT_MYSQL_DB_USERNAME" in os.environ and "OPENSHIFT_MYSQL_DB_PASSWORD" in os.environ:
	print "application: $OPENSHIFT_MYSQL_DB_URL ist", os.environ["OPENSHIFT_MYSQL_DB_URL"] #DEBUG
	db = web.database(
		host = os.environ["OPENSHIFT_MYSQL_DB_HOST"],
		port = int(os.environ["OPENSHIFT_MYSQL_DB_PORT"]),
		dbn = 'mysql',
		db = 'haiku',
		user = os.environ["OPENSHIFT_MYSQL_DB_USERNAME"],
		pw = os.environ["OPENSHIFT_MYSQL_DB_PASSWORD"]
	)
elif "HAIKU_MYSQL_USER" in os.environ and "HAIKU_MYSQL_PASSWORD" in os.environ:
	db = web.database(
		dbn = 'mysql',
		db = 'haiku',
		user = os.environ["HAIKU_MYSQL_USER"],
		pw = os.environ["HAIKU_MYSQL_PASSWORD"]
	)
else:
	db = web.database(dbn='mysql', db='haiku', user="haiku", pw="automatoetry") #DEBUG
#	db = None # @TODO: Fehlerbehandlung?
print "application: db ist", db #DEBUG


# Datenbankfunktionen
def getHaikus(page=1):
	u"""@TODO: Beschreibung fehlt
	"""
	limit = 10
	offset = (page - 1) * limit
	countResult = db.query("SELECT count(*) from haiku")
	count = int(countResult[0].values()[0])
	if offset > count - limit:
		offset = None
	return (db.select('haiku', order="id DESC", limit=limit, offset=offset), count)

def addHaiku(inputData):
	u"""@TODO: Beschreibung fehlt
	"""
	db.insert(
		'haiku',
		content = inputData.content,
		seedword = inputData.seedword,
		genes = inputData.genes,
		generation = inputData.generation,
		author = inputData.author,
		comment = inputData.comment,
		algorithm = Haiku.devFunction,
		posted_on = datetime.datetime.now()
	)

def delHaiku(id): # @TODO
	pass


class Share:
	shareForm = web.form.Form(
		web.form.Textarea("content", description = "Dein Haiku:", readonly="readonly", class_ = "textfield", rows = 3, cols = 40),
		web.form.Textbox("author", description = "Dein Name (optional):", class_ = "textfield", size = 40),
		web.form.Textarea("comment", description = "Kommentar (optional):", class_ = "textfield", rows = 5, cols = 40),
		web.form.Hidden("seedword"),
		web.form.Hidden("genes"),
		web.form.Hidden("generation"),
		web.form.Hidden("algorithm"),
		web.form.Button("Fertig", class_ = "button")
	)

	def GET(self):
		raise web.seeother("/gallery")

	def POST(self):
		input = web.input()
		print "/share: input ist", input #DEBUG
		sf = self.shareForm()
		sf.content.set_value(input.content.replace("<br>", "\n")) # @TODO: Herausfinden, wann "<br />" durch "<br>" ersetzt wird
		sf.seedword.set_value(input.seedword)
		sf.genes.set_value(input.genes)
		sf.generation.set_value(input.generation)
		sf.algorithm.set_value(Haiku.devFunction)
		return render.share(sf)


class AddHaiku:
	def GET(self):
		raise web.seeother("/gallery")

	def POST(self):
		input = web.input()
		print "AddHaiku POST(): input ist", input #DEBUG
		if input.author == "":
			input.author = "anonym"
		addHaiku(input)
		raise web.seeother("/gallery?note=HaikuAdded")


class Gallery:
	def GET(self):
		input = web.input()
		note=input.get("note", "")
		page = input.get("page", 1)
		try:
			page = int(page)
		except:
			page = 1
		haikus, count = getHaikus(page=page)
		return render.gallery(haikus, count, page, note)

	def POST(self):
		self.GET()


class GenerationZero:
	u"""Definiert Formular und GET- und POST-Methoden fuer die
		Startwebseite des Projekts, auf der der User den Genotyp fuer
		Generation 1 bestimmt. Das zugehoerige Template ist
		"templates/genzero.html".
	"""
	form = web.form.Form(
		web.form.Textbox(
			"seedword",
			web.form.notnull,
			size = 19,
			class_ = "textfield",
			description = "Startwort:"
		),
		web.form.Button("Neues Zufallswort", id = "newSeedword", class_ = "button"),
		web.form.Textbox(
			"genes",
			web.form.notnull,
			web.form.regexp(r"^[a-z ]*$", "Bitte nur Kleinbuchstaben"),
			web.form.regexp(GENES_REGEXP.pattern, "Gene muessen 5, 7, 5 Zeichen enthalten, jeweils durch Leerzeichen getrennt"),
			size = 19,
			maxlength = 19,
			class_ = "textfield",
			description = "Gene:"
		),
		web.form.Button("Neue Gene", id = "newGenes", class_ = "button"),
		web.form.Dropdown(
			"Algorithmus",
			[(f, f + " (" + Haiku.devFuncDescriptions[f] + ") ") for f in Haiku().getDevFunctions() if not Haiku.devFuncDescriptions[f].startswith("Debug")]
		),
		web.form.Button("Los", class_ = "button")
	)

	def GET(self):
		u"""Gibt das Formular fuer Gene und Seedwort zurueck, befuellt
			mit Zufallswerten.
		"""
		print "/ GET: Session ID ist", session.session_id, "und session.haiku ist", "haiku" in session #DEBUG
		f = self.form()
#		if "haiku" in session:
#			f["seedword"].set_value(session.haiku.getGenotype()[0])
#			f["genes"].set_value(session.haiku.getGenotype()[1])
#		else:
		tmpHaiku = Haiku()
		f["seedword"].set_value(tmpHaiku.getGenotype()[0])
		f["genes"].set_value(tmpHaiku.getGenotype()[1])
		return render.start(f)

	def POST(self):
		u"""Wird von den Buttons auf "templates/start.html" aufgerufen.
			Je nach Aufrufer wird unterschiedlich verfahren:
			- Neues Seedwort / Neue Gene: Funktion gibt neue
			Zufallswerte zurueck
			- Los-Button (Submit): Funktion erzeugt Haiku mit den
			Werten aus dem Formular neu und ruft Seite "/haiku" auf.
		"""
		input = web.input()
		print "/ POST: Input ist", input #DEBUG

		# "Los"-Button
		if "caller" not in input:
			f = self.form()
			if not f.validates():
				return render.start(f)
			session.haiku = Haiku(f.d.seedword, f.d.genes)
			Haiku.devFunction = input.Algorithmus
			raise web.seeother("/haiku")

		# "Neu"-Button: neues Seedwort oder Gene zurueckgeben
		tmpPoem = Haiku()
		if input["caller"] == "newSeedword":
			return tmpPoem.getRandomSeedword()
		elif input["caller"] == "newGenes":
			return tmpPoem.getRandomGenes()


class Automatoetry:
	u"""Definiert GET- und POST-Methoden fuer die Hauptwebseite des
		Projekts, auf der der User zwischen den Kindern einer Generation
		entscheidet, welches sich weiter fortpflanzt. Das zugehoerige
		Template ist "templates/automatoetry.html".
	"""

	def GET(self):
		u"""Gibt Seedwort, Gene und Phaenotyp fuer Generation 1 zurueck
			(den Phaenotyp als Liste von Zeilen).
		"""
		if not "haiku" in session:
			raise web.seeother("/")
		return render.automatoetry(session.haiku)

	def POST(self):
		u"""Erledigt POST-Requests. Sorgt fuer den Wechsel zur neuen
			Generation und gibt zwei neue Kinder zurueck.
		"""
		if not "haiku" in session:
			raise web.seeother("/")
		input = web.input()
		print "/haiku POST: input ist:", input, "und das Session-Haiku lautet", session.haiku #DEBUG

		if input.query == "0": # initialer Ajax-Aufruf Teil 1
			return json.dumps(session.haiku.getPhenotype())
		elif input.query == "1": # initialer Ajax-Aufruf Teil 2
			parent = session.haiku
		elif input.query == "l": # Linkes Kind
			parent = session.haiku.getChildren()[0]
		elif input.query == "r": # Rechtes Kind
			parent = session.haiku.getChildren()[1]
		print "/haiku POST: Neuer Elter ist", parent #DEBUG

		# neue Kinder erzeugen
		children = parent.procreateN(2)
		for c in children:
			c.getPhenotype()
		if parent != session.haiku:
			session.haiku = parent

		# Kinder-Daten zurueckgeben
		data = [[c.getGenotype()[0], c.getGenotype()[1], c.getPhenotype()] for c in children]
		data.append(str(children[0].getGeneration()))
		return json.dumps(data)


if __name__ == '__main__':
	if RUNS_ON_OPENSHIFT:
		from wsgiref.simple_server import make_server
		httpd = make_server('localhost', 80, application)
		httpd.serve_forever()
	else: # starte lokal mit web.py
		app.run()
